x-common-infos:
  # Env variables stored in a .env file at same level than docker-compose.yaml
  environment: &common-env
    POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME:-postgres_bloom}
    POSTGRES_DB: ${POSTGRES_DB:-bloom_db}
    POSTGRES_USER: ${POSTGRES_USER:-bloom_user}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bloom}
    LOGGING_LEVEL: ${LOGGING_LEVEL:-INFO}

services:
  scheduler:
    container_name: bloom-scheduler
    hostname: bloom-scheduler
    image: d4g/bloom:${VERSION:-latest}
    build:
      context: .
      dockerfile: ./docker/Dockerfile
      args:
        IMAGE_PYTHON: ${IMAGE_PYTHON:-python:3.10-slim-bullseye}
        POETRY_VERSION: ${POETRY_VERSION:-1.8.1}
    # Nominal start:
    command:
        - bash
        - -c
        - |
            echo "Starting Scheduler" &&
            cron -f -L 2
    # Debug start:
    #command: bash
    #tty: true
    #stdin_open: true
    volumes:
      - ./:/project/
    environment:
      <<: *common-env
      POSTGRES_PORT: 5432
    networks:
      - bloom_net
    depends_on:
      init:
        condition: service_completed_successfully
  front:
    container_name: bloom-front
    hostname: bloom-front
    image: d4g/bloom:${VERSION:-latest}
    # Nominal start:
    command:
        - bash
        - -c
        - |
            /bin/echo "Here is my frontend service" &&
            /bin/echo "Work in progress" &&
            /bin/echo "See you later"
    # Debug start:
    #command: bash
    #tty: true
    #stdin_open: true
    volumes:
      - ./:/project/
    environment:
      <<: *common-env
      POSTGRES_PORT: 5432
    networks:
      - bloom_net
    depends_on:
      init:
        condition: service_completed_successfully
  
  postgres:
    container_name: postgres_bloom
    hostname: postgres_bloom
    image: ${POSTGIS_IMAGE:-postgis/postgis:14-3.3-alpine}
    environment:
      <<: *common-env
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    networks:
      - bloom_net
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "pg_isready --quiet --dbname=$${POSTGRES_DB:-bloom_db} --username=$${POSTGRES_USER:-bloom_user}"
        ]
      interval: 100ms
      timeout: 14s
      retries: 140
      start_period: 0s

  init:
    container_name: bloom-init
    hostname: bloom-init
    image: d4g/bloom:${VERSION:-latest}

    # Nominal start:
    # As postgres+postgis gt available, then unavialable, then avialable at database init
    # it happens that init is launch before second and definitve postgres healthy state
    # and fails
    # so giving init 3 chances and 15 seconds to init before failing
    command: /bin/bash -c "cd backend; for i in 1 2 3; do alembic upgrade head && break || sleep 5; done"
    # Debug start:
    #command: bash
    #tty: true
    #stdin_open: true

    environment:
      <<: *common-env
      POSTGRES_PORT: 5432
    volumes:
      - ./:/project/
    networks:
      - bloom_net
    depends_on:
      postgres:
        condition: service_healthy # The service is working and still running

networks:
  bloom_net:
    name: bloom_net
